<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Minh Nguyen</title>
        <description>Minh Nguyen - Minh Nguyen</description>
        <link>http://www.minh.io</link>
        <link>http://www.minh.io</link>
        <lastBuildDate>2014-02-01T17:16:22-05:00</lastBuildDate>
        <pubDate>2014-02-01T17:16:22-05:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Prettify vs Highlight.js vs SyntaxHighlighter</title>
                <description>&lt;p&gt;I&amp;#8217;ve changed syntax highlighters yet again. This time I&amp;#8217;ve decided to use &lt;a href='https://code.google.com/p/google-code-prettify/'&gt;Google-Code-Prettify&lt;/a&gt;. In a &lt;a href='/tech/2013/06/23/highlightjs-vs-syntaxhighlighter/'&gt;previous post&lt;/a&gt; I compared HighlightJS vs Syntax Highlighter and went with HighlightJS because of its easier setup, improved performance, and great themes (I liked the Solarized - Dark theme). It&amp;#8217;s still a great library and I may change my mind yet again and switch back. However, once I switched to a Macbook Retina, the &lt;a href='http://design4.minh.io/tech/2013/06/23/highlightjs-vs-syntaxhighlighter/'&gt;Solarized Dark theme&lt;/a&gt; didn&amp;#8217;t look that great, I think perhaps because of its dark blue contrasted with my light background. I also tried the lighter Solarized theme from &lt;a href='http://octopress.org/docs/plugins/codeblock/'&gt;Octopress&lt;/a&gt; but it still didn&amp;#8217;t feel right.&lt;/p&gt;

&lt;p&gt;Anyway, long story short, I&amp;#8217;ve decided that most readers/users are familiar with the syntax highlighting from Stack Overflow and Github, so I adopted Google Code Prettyify, which has a similar look and good performance. The one issue I encountered was that all of my &amp;#60;pre&amp;#62; tags needed to have a classname of &amp;#8220;prettyprint.&amp;#8221; However, as explained in &lt;a href='tech/2014/01/29/regex-and-scripting-ftw/'&gt;another post&lt;/a&gt;, I updated all of my posts through a simple Ruby script:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
def proc_file(fname)
	text = File.read(fname)
	newText = text.gsub(/&amp;lt;pre&gt;&amp;gt;, '&amp;lt;pre class=&quot;prettyprint&quot;&amp;gt;')
	File.open(fname, &quot;w&quot;) {|file| file.puts newText}
	puts &quot;Processed &quot; + fname
end

def proc_dir(dir)
	Dir[dir].each do |fname|
	  next if fname == '.' or fname == '..'
	  next if !fname.include? &quot;.md&quot; and !fname.include? &quot;.html&quot;
	  proc_file(fname)
	end
end

proc_dir(&quot;_posts/*&quot;)
&lt;/pre&gt;</description>
                <link>http://www.minh.io/tech/2014/01/30/prettyprint-syntax-highlighting</link>
                <guid>http://www.minh.io/tech/2014/01/30/prettyprint-syntax-highlighting</guid>
                <pubDate>2014-01-30T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Regex and scripting FTW</title>
                <description>&lt;p&gt;It&amp;#8217;s great being a programmer. Recently I had to modify and replace various matching strings in 26 files. I&amp;#8217;m not sure how tedious, sucky, and error-prone this would be if I did this manually but luckily I&amp;#8217;m a programmer and quickly wrote up a Ruby script. I also used Git and Sourcetree to review my changes and can roll back changes later.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;#8217;s the code I wrote, which reads all .md and .html files in a directory and replaces all scripts matching &amp;#60;pre&amp;#62; with &amp;#60;pre class=&amp;#8221;prettyprint&amp;#8221;&amp;#62;. It&amp;#8217;s not exactly using a regular expression but one could be used if necessary.&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
def proc_file(fname)
	text = File.read(fname)
	newText = text.gsub(/&amp;lt;pre&gt;&amp;gt;, '&amp;lt;pre class=&quot;prettyprint&quot;&amp;gt;')
	File.open(fname, &quot;w&quot;) {|file| file.puts newText}
	puts &quot;Processed &quot; + fname
end

def proc_dir(dir)
	Dir[dir].each do |fname|
	  next if fname == '.' or fname == '..'
	  next if !fname.include? &quot;.md&quot; and !fname.include? &quot;.html&quot;
	  proc_file(fname)
	end
end

proc_dir(&quot;_posts/*&quot;)
&lt;/pre&gt;</description>
                <link>http://www.minh.io/tech/2014/01/29/regex-and-scripting-ftw</link>
                <guid>http://www.minh.io/tech/2014/01/29/regex-and-scripting-ftw</guid>
                <pubDate>2014-01-29T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>IcePress theme</title>
                <description>&lt;p&gt;I&amp;#8217;ve decided to update my website design yet again. This time, I&amp;#8217;m rebuilding the site from the ground up, using Octopress instead of Jekyll Bootstrap. Everything will be open sourced like before, but this time my goal is to make the theme easier to extend and use; it will be called &amp;#8220;Ice Press&amp;#8221; since it&amp;#8217;s winter in DC, the theme has a &amp;#8220;winter&amp;#8221; look, and it&amp;#8217;s based on Octopress.&lt;/p&gt;

&lt;p&gt;Here are the theme goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive design&lt;/li&gt;

&lt;li&gt;Better code / syntax highlighter&lt;/li&gt;

&lt;li&gt;Support for a &amp;#8220;blog of blogs&amp;#8221; meaning that I can have blogs other than technology&lt;/li&gt;

&lt;li&gt;Improved support for graphics. More imagery and less text.&lt;/li&gt;

&lt;li&gt;Better readability through better typography and layout&lt;/li&gt;

&lt;li&gt;Easier maintenance (Octopress uses SASS and is better maintained than Jekyll Bootstrap)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I hope to achieve the following overall goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attract more visitors&lt;/li&gt;

&lt;li&gt;Connect with more people&lt;/li&gt;

&lt;li&gt;Write more often (i.e. improve my writing skills)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further adieu, here&amp;#8217;s the inital &lt;a href='http://icepress.minh.io'&gt;Ice Press theme&lt;/a&gt; and the &lt;a href='https://github.com/minhongrails/IcePress'&gt;Github page&lt;/a&gt;.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2014/01/04/icepress-theme</link>
                <guid>http://www.minh.io/tech/2014/01/04/icepress-theme</guid>
                <pubDate>2014-01-04T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Running Meteor Forever</title>
                <description>&lt;p&gt;Recently I&amp;#8217;ve decided to learn &lt;a href='http://www.meteor.com/'&gt;Meteor JS&lt;/a&gt;, which is an &amp;#8220;open-source platform for building top-quality web apps in a fraction of the time.&amp;#8221; It&amp;#8217;s super fast (i.e. great for hackathons) to get an application up and running. I&amp;#8217;ve only been using Meteor for a couple of days but love it so far and possibly will consider using it instead of my current favorite &lt;a href='http://www.playframework.com/'&gt;Play Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One issue I encountered when deploying my application to production was that once I started the app on my server using &amp;#8220;meteor &amp;amp;&amp;#8221; I noticed the application would die after I exited the terminal. This is actually a common &amp;#8220;issue&amp;#8221; in the NodeJS world and many posts have suggested the use of the &lt;a href='https://npmjs.org/package/forever'&gt;NPM Forever&lt;/a&gt; tool for running a Meteor bundle even when you exit the terminal session. One &lt;a href='http://stackoverflow.com/questions/14529677/what-is-the-proper-syntax-for-running-a-meteor-generated-node-bundle-using-forev'&gt;StackOverflow post&lt;/a&gt; showed the following commands:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;export MONGO_URL=mongodb://localhost:27017/&amp;lt;dbname&amp;gt;
export PORT=&amp;lt;server_port&amp;gt;
export ROOT_URL=http://sub.example.com/
forever start bundle/main.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately this didn&amp;#8217;t work for me but bsilvereagle from the Meteor IRC channel suggested I create a &lt;a href='http://tmux.sourceforge.net/'&gt;tmux&lt;/a&gt; session, start my Meteor server in it, and detach the session. So, you would roughly run the following commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code class='no-highlight'&gt;tmux
[a new tmux session will be created and you'll notice a green bar at the bottom of the terminal]
[start your Meteor app: (e.g. &quot;meteor &amp;amp;&quot;)]
[press CLTR-B, :, and &quot;detach&quot; to detach the session]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now Meteor will run even if I exit from my terminal. Yay!&lt;/p&gt;

&lt;p&gt;Hopefully this helps someone out there but here&amp;#8217;s a couple more tmux resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session'&gt;Ubuntu post&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.dayid.org/os/notes/tm.html'&gt;tmux commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
                <link>http://www.minh.io/tech/2013/12/01/running-meteor-forever</link>
                <guid>http://www.minh.io/tech/2013/12/01/running-meteor-forever</guid>
                <pubDate>2013-12-01T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>6 Startup Venture Capital Tips</title>
                <description>&lt;p&gt;Recently I&amp;#8217;ve been obsessed with learning as much as I can about startups and business. As such, I came across a fantastic video from Google I/O 2011 titled: &lt;a href='http://www.youtube.com/watch?v=15iWltPLuPY'&gt;How to Get Your Startup Idea Funded by Venture Capitalists&lt;/a&gt;. It&amp;#8217;s a great ~1 hour talk with a panel including a venture capitalist from YC, a VC from Google Ventures, and a recent founder who raised funding. Here are the primary tips:&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Eliminate distractions&lt;/div&gt;
&lt;p&gt;An audience member asked how he should find motivation and a panelist gave unorthodox but brilliant advice: find motivation by making everything else less interesting. Personally I&amp;#8217;ve found this works really well. For instance, I used to play video games quite a bit but I&amp;#8217;ve cut back, which gives me time to work on my ideas and projects.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Focus on an idea you're passionate about&lt;/div&gt;
&lt;p&gt;One member of the audience mentioned he was an &amp;#8220;idea factory&amp;#8221; and didn&amp;#8217;t know how to select an idea. The panel advised him to select an idea he would be excited to work on after waking up every morning for 5+ years.&lt;/p&gt;

&lt;p&gt;Another panelist even mentioned that &amp;#8220;idea factory&amp;#8221; founders are not ideal personalities for entrepreneurship since VCs look for people with focus; he suggested this person should find a cofounder to provide balance. This conflicted a bit with &lt;a href='http://www.youtube.com/watch?v=rWKUoabjjxg'&gt;Mark Zuckerburg&amp;#8217;s talk at Startup School 2011&lt;/a&gt; when he advised startups to experiment and do things differently; echoing Facebook&amp;#8217;s famous &amp;#8220;move fast and break things&amp;#8221; philosophy.&lt;/p&gt;

&lt;p&gt;Personally I love change and believe that &amp;#8220;idea factory&amp;#8221; personalities are essential for innovation. However, I can see how this may be a turn off for VCs especially if a company has too many unfocused, unspecialized products. For example, Apple has had great success with its very high quality, yet focused product lines.&lt;/p&gt;

&lt;p&gt;Overall, maybe the lesson is that there should be balance between focus and exploring ideas but the end result needs to be a great focused product.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Try to have 2-3 cofounders&lt;/div&gt;
&lt;p&gt;VCs like to see more than one founder because it shows validation of an idea, especially when a founder can convince another person to leave their job and join them. There has been data showing that 2-3 cofounders are the ideal size; there isn&amp;#8217;t enough data for teams &amp;gt; 3 and solo founders are rare.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Have multiple offers&lt;/div&gt;
&lt;p&gt;An audience member asked how a startup should be valued. One VC panelist mentioned that there are valuations based on numerous metrics but generally if a number is pitched by the founder it creates an anchor / floor valuation; even better: if a startup has other VCs interested in it, VCs tend to be more afraid of missing out on great deals than possibly overpaying.&lt;/p&gt;

&lt;p&gt;However, a VC also cautioned that if an initial VC does not do a follow-up round then it can be a red flag.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Find balance&lt;/div&gt;
&lt;p&gt;This is a theme I&amp;#8217;ve heard over and over. Startups can be exhausting and it&amp;#8217;s easy to forget about diet, health, relationships, other interests, etc. I&amp;#8217;ve often heard that you can only select a startup and one of the other categories. One takeway is never to let your startup dominate your life such that you risk your future health.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Don't create a business plan&lt;/div&gt;
&lt;p&gt;Apparently VCs from Y combinator and Google Ventures don&amp;#8217;t really care about business plans because they generally are not useful for unpredictable tech companies. Instead they care more about users, traction, passion, and the team.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/11/25/10-startup-tips</link>
                <guid>http://www.minh.io/tech/2013/11/25/10-startup-tips</guid>
                <pubDate>2013-11-25T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Google Glass Version 2 Review</title>
                <description>&lt;p&gt;In this post I wanted to describe my experiences with the Google Glass Explorer Version2 edition. Please note that I am not a professional reviewer and this post will continuously change as I spend more time with it. I&amp;#8217;ll be keeping a &lt;a href='https://github.com/minhongrails/blog/commits/master/_posts/2013-11-22-google-glass-version2-review.md'&gt;changelog&lt;/a&gt; though.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Photos&lt;/div&gt;&lt;a href='/assets/img/glass/left.JPG'&gt;&lt;img alt='left.JPG' class='imageSpotlight' src='/assets/img/glass/left.JPG' width='900px' /&gt;&lt;/a&gt;
&lt;p&gt;Cotton color Glass. There&amp;#8217;s 5 colors now: Cotton, Charcoal, Tangerine, Shale, and Sky.&lt;/p&gt;
&lt;a href='/assets/img/glass/shades.JPG'&gt;&lt;img alt='shades.JPG' class='imageSpotlight' src='/assets/img/glass/shades.JPG' width='900px' /&gt;&lt;/a&gt;
&lt;p&gt;Shades are now available in version 2&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Initial Thoughts&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve only been using Glass for less than a day but it seems promising so far. Initially it was annoying to set up because the mobile site of www.google.com/myglass asked for a Wifi connection but wouldn&amp;#8217;t let me select a connection type on mobile Safari or Chrome. I submitted an issue to Google but worked around it by using my Macbook.&lt;/p&gt;
&lt;b&gt;Good&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Voice recognition is accurate. Generally, the text-to-speech processing was quite good, giving better results than what I typically see from the iPhone&amp;#8217;s Siri.&lt;/li&gt;

&lt;li&gt;Voice control is convenient. It&amp;#8217;s easier to do Google searches through the voice interface as opposed to opening my phone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Bad&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Erogonmics. Personally I wish there was more flexibility in the frame since it is somewhat tight around my head. I suppose this can be good since it won&amp;#8217;t fall off but at the same time, as a person who doesn&amp;#8217;t normally wear glasses, I can feel the effect of wearing these glasses over time.&lt;/li&gt;

&lt;li&gt;Use cases. Given that it&amp;#8217;s so new, other than taking photos, videos, reading my emails, or doing Google searches, I don&amp;#8217;t know what else I can do with it. However, there is the Mirrors API, &lt;a href='https://developers.google.com/glass/'&gt;Glass Development Kit&lt;/a&gt; (GDK), and several Glass apps that I need to try out.&lt;/li&gt;

&lt;li&gt;It stands out. Unfortunately, for better or worse, you can usually spot a Glass wearable a mile away. I primarily bought the Glass to see the possibilities as a developer but as a consumer I would probably wait until Glass becomes more mainstream and less noticeable as a wearable.&lt;/li&gt;

&lt;li&gt;It&amp;#8217;s $1,500. I&amp;#8217;m not entirely sure it&amp;#8217;s worth it at this price but there are rumors that it&amp;#8217;ll cost between &lt;a href='http://gigaom.com/2013/08/08/why-google-glass-costs-1500-now-and-will-likely-be-around-299-later/'&gt;$299 and $1,500&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall I see promise in Glass and will see what else I can try with it but at the moment the negatives are outweighing the positives. Fortunately, Glass does have a &lt;a href='http://www.google.com/glass/terms/'&gt;30 day return policy&lt;/a&gt; that I may use unless I discover something super compelling about Glass.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/11/22/google-glass-version2-review</link>
                <guid>http://www.minh.io/tech/2013/11/22/google-glass-version2-review</guid>
                <pubDate>2013-11-22T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>DC Tech D&amp;B Hackathon Honorable Mention</title>
                <description>&lt;p&gt;This weekend I attended the DC Tech &lt;a href='http://www.istrategylabs.com/' target='_blank'&gt;iStrategyLabs&lt;/a&gt; / &lt;a href='https://dnbdctech.eventbrite.com/' target='_blank'&gt;D&amp;amp;B Hackathon&lt;/a&gt; and won an honorable mention prize for $1,000 out of ~13 teams. Woohoo! I&amp;#8217;ll admit that the prizes are nice but I actually attend hackathons (this was my second) because they&amp;#8217;re fun. You learn valuable skills, work in great coworking spaces (Microsoft&amp;#8217;s office in Bethesda), meet cool people, and see awesome projects.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Prehack&lt;/div&gt;
&lt;p&gt;Typically the best teams organize prior to a hack and brainstorm ideas. They also review the APIs and rules. I didn&amp;#8217;t actually do any of this: I went solo and mostly spent the night before reading a little bit. However, I write code all the time, so in actuality, I&amp;#8217;m always preparing for hackathons.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Hack&lt;/div&gt;
&lt;p&gt;Overall the hack was pretty fun. I partnered with another developer and we formed a team on the spot. Initially we had no idea what to do and spent a bit of time actually reading the rules, APIs, and coming up with ideas. Finally, we decided to create &lt;a href='http://fraudwatch.minh.io' target='_blank'&gt;http://fraudwatch.minh.io&lt;/a&gt;:&lt;/p&gt;
&lt;img alt='fraudwatch.jpg' class='imageSpotlight' src='/assets/img/fraudwatch_ipad.jpg' /&gt;&lt;div class='mSpotlight'&gt;Results&lt;/div&gt;
&lt;p&gt;Finally, after many hours and very little sleep, I presented and demoed our app to a crowd of ~100 people and 12 judges? I think we got extra points because of our presentation, which used reveal.js slides as well as our placeit.net images showing our mobile capabilities. We may also have gotten points because we were probably the smallest team (team sizes typically were 3-7). Anyhow, the slides are available at &lt;a href='http://fraudwatch.minh.io/slides' target='_blank'&gt;http://fraudwatch.minh.io/slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was surprised we won anything because there were some &lt;a href='http://dctechhack.challengepost.com/submissions' target='_blank'&gt;amazing apps&lt;/a&gt;. My favorite was one that isn&amp;#8217;t listed &amp;#8211; it was a beautiful map built on top of Google Maps with the best heatmaps I&amp;#8217;ve seen. I&amp;#8217;m quite surprised they didn&amp;#8217;t even win honorable mention (unless I misheard?) but it might have been because it might not have addressed the goals of the judges. Other than that I also really liked the &lt;a href='http://ec2-54-237-120-185.compute-1.amazonaws.com/' target='_blank'&gt;B.Verify&lt;/a&gt; app, which had a clean interface, great presentation, and user story.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Lessons Learned&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ll definitely be attending future hackathons and hope to win 1st place someday but here are the lessons I learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expect technical issues. Before I demoed the wifi went out and the screen resolution was lower than we planned.&lt;/li&gt;

&lt;li&gt;Prepare ahead of time: we spent 33% of Saturday just reading the APIs and brainstorming ideas.&lt;/li&gt;

&lt;li&gt;Team up beforehand. I&amp;#8217;ve had great luck meeting good teams but I think to get #1 it&amp;#8217;s probably best if you have a team ahead of time.&lt;/li&gt;

&lt;li&gt;Don&amp;#8217;t forget cables.&lt;/li&gt;

&lt;li&gt;Choose teammates carefully. I actually heard from other teams where people didn&amp;#8217;t contribute or abandoned their project.&lt;/li&gt;
&lt;/ul&gt;</description>
                <link>http://www.minh.io/tech/2013/11/10/dc-tech-db-hackathon-honorable-mention</link>
                <guid>http://www.minh.io/tech/2013/11/10/dc-tech-db-hackathon-honorable-mention</guid>
                <pubDate>2013-11-10T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Design reboot - part III</title>
                <description>&lt;p&gt;It&amp;#8217;s been a little over a month since my last redesign and I&amp;#8217;ve decided to change things yet again. I&amp;#8217;m not sure what I was thinking when I decided to create a &lt;a href='http://design5.minh.io'&gt;blue background&lt;/a&gt; in my previous design but I took that out.&lt;/p&gt;

&lt;p&gt;Recently I was inspired by several websites. I liked the navigation on the &lt;a href='http://www.playframework.com/'&gt;Play Framework&amp;#8217;s website&lt;/a&gt; so I imitated that and I also liked the cleanness and readability of &lt;a href='http://www.germanysbestkeptsecret.com/'&gt;Christoph Oro&amp;#8217;s portfolio&lt;/a&gt; so I took lots of design elements from that.&lt;/p&gt;

&lt;p&gt;I also added some &lt;a href='http://fortawesome.github.io/Font-Awesome'&gt;Font Awesome icons&lt;/a&gt; and a robot Favicon. There&amp;#8217;s also a search button in the menu where you can search posts by title (still working on this).&lt;/p&gt;

&lt;p&gt;Next up, I plan to add a search engine, rethink how to display all of my posts since there&amp;#8217;s so many (infinite scroll maybe?), and add a tag cloud.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/09/10/design-reboot-part-iii</link>
                <guid>http://www.minh.io/tech/2013/09/10/design-reboot-part-iii</guid>
                <pubDate>2013-09-10T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>JavaScript closure example</title>
                <description>&lt;p&gt;JavaScript can be tricky to understand. For example, look at the following functions:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='javascript'&gt;function logNumbers1(){
    for (var x = 0; x &amp;lt;  10; x++) {
        console.log(x);
    }
}

logNumbers1();&lt;/code&gt;&lt;/pre&gt;&lt;pre class='prettyprint'&gt;
&lt;code class='javascript'&gt;function logNumbers2(){
    for (var x = 0; x &amp;lt;  10; x++) {
        setTimeout(function() {
            console.log(x)
        }, 0);
    }
}

logNumbers2();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first glance, it appears that both functions are equivalent. The only difference, it seems, is that the second function sets a timeout of zero.&lt;/p&gt;

&lt;p&gt;So, what do you think will happen?&lt;/p&gt;
&lt;div class='btn btn-large' id='showAnswer'&gt;
     Show answer  &lt;i class='icon-chevron-down'&gt; &lt;/i&gt;
&lt;/div&gt;&lt;div&gt;
    &lt;br /&gt;
&lt;/div&gt;&lt;div id='hidden'&gt;

&lt;p&gt;Initially, it appears that both functions should log 0 through 9.
As it turns out, logNumbers2 actually prints the number 10 ten times because of its closure. 
The reason is because the last value assigned to x is 10 so when console.log(x)
is executed, it only has access to the last value assigned to x within its scope/closure,
so it outputs 10 ten times.
It might be helpful to run this code through a debugger like the Chrome developer
tool and in particular observe the &quot;closure&quot; section which shows what variables
are accessible within a particular execution stack.&lt;/p&gt;

&lt;p&gt;While closures can be confusing, they do provide a nice benefit for encapsulation.
For example, &lt;a href='http://stackoverflow.com/questions/4532407/general-javascript-syntax-question'&gt;observe the following&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='prettyprint'&gt;
&lt;code class='javascript'&gt;function Counter() {
    var counter = 0;
    return {
        increment: function() {
            counter++; // closure only has access to &quot;counter&quot;
        },
        print: function() {
            console.log(counter);
        }
    }
}

var a = Counter();
a.increment();
a.increment();
console.log(a.counter); // undefined
a.print(); // 2
var b = Counter();
b.print(); // 0
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Here's another &lt;a href='http://stackoverflow.com/questions/947352/javascript-closure-and-data-visibility'&gt;example&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='prettyprint'&gt;
&lt;code class='javascript'&gt;function create() {
    var counter = 0;
    this.increment = function() {
        counter++;
    }
    this.print = function() {
        console.log(counter);
    }
}
var c = new create();
c.increment();
c.print(); // 1
console.log(c.counter); // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description>
                <link>http://www.minh.io/tech/2013/09/09/javascript-closures</link>
                <guid>http://www.minh.io/tech/2013/09/09/javascript-closures</guid>
                <pubDate>2013-09-09T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Race conditions in Java with ThreadWeaver</title>
                <description>&lt;p&gt;Writing code to test race conditions is tough. Recently I looked at &lt;a href='https://code.google.com/p/thread-weaver/'&gt;ThreadWeaver&lt;/a&gt;, which is a framework that &lt;a href='https://code.google.com/u/alasdair.mackintosh/'&gt;Alasdair Mackintosh&lt;/a&gt; wrote for writing multi-threaded unit tests in Java. I liked how it allows you to write deterministic code where you can control the exact sequence/interweaving of operations between threads. In other words, it allows you to precisely create and test a race condition.&lt;/p&gt;

&lt;p&gt;The only downside to the framework was that it used Ant. This meant it took a little bit of extra work to set up since I had to download the jars and figure out the project structure. Considering all of this, I took some time to &amp;#8220;Mavenize&amp;#8221; the project and put a version on &lt;a href='https://github.com/minhongrails/ThreadWeaver'&gt;Github&lt;/a&gt;. I&amp;#8217;m currently working with another developer to possibly publish 0.20 to Maven Central.&lt;/p&gt;

&lt;p&gt;Other issues I encountered were &amp;#8220;no object instrumented&amp;#8221; and &amp;#8220;class not instrumented&amp;#8221; errors. After posting a question to the mailing list, the author responded almost immediately and I &lt;a href='https://groups.google.com/forum/#!topic/thread-weaver/3BS74oiB9Yc'&gt;resolved the issue&lt;/a&gt; by placing my ThreadWeaver &amp;#8220;Scripts&amp;#8221; code within the ThreadWeaver annotations like @ThreadMain, etc.&lt;/p&gt;

&lt;p&gt;Open source is awesome :).&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/08/24/race-conditions-in-java-with-threadweaver</link>
                <guid>http://www.minh.io/tech/2013/08/24/race-conditions-in-java-with-threadweaver</guid>
                <pubDate>2013-08-24T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Highlight.js line numbers</title>
                <description>&lt;div class='mSpotlight'&gt;Update 2/1/14&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve &lt;a href='/tech/2014/01/30/prettyprint-syntax-highlighting/'&gt;changed syntax highlighters&lt;/a&gt;, so see &lt;a href='http://design7.minh.io/tech/2013/08/17/highlightjs-line-numbers/'&gt;this version&lt;/a&gt;, which uses Highlight.js&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Summary&lt;/div&gt;
&lt;p&gt;In this post I will show how to add line numbers with syntax highlighting provided through &lt;a href='http://softwaremaniacs.org/soft/highlight/en/' target='_blank'&gt;Highlight.js&lt;/a&gt;. I decided to give this a whirl after getting a &lt;a href='/tech/2013/06/23/highlightjs-vs-syntaxhighlighter/'&gt;comment&lt;/a&gt; from the author &lt;a href='https://github.com/isagalaev' target='_blank'&gt;Ivan Sagalaev&lt;/a&gt; describing how Highlight.js supports line numbers on an &lt;a href='https://github.com/isagalaev/highlight.js/compare/line-numbers'&gt;experimental code branch&lt;/a&gt; (line numbers are actually &lt;a href='http://highlightjs.readthedocs.org/en/latest/line-numbers.html'&gt;not included as a feature&lt;/a&gt;). Hmm, I thought nobody read my random posts but I guess not :).&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Examples&lt;/div&gt;
&lt;p&gt;So, without further ado, here&amp;#8217;s code with line numbers:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='ruby lineNumbers'&gt;class Float
  def number_decimal_places
    self.to_s.length-2
  end
  def to_fraction
    higher = 10**self.number_decimal_places
    lower = self*higher
    gcden = greatest_common_divisor(higher, lower)

    return (lower/gcden).round, (higher/gcden).round
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the same code without:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='ruby'&gt;class Float
  def number_decimal_places
    self.to_s.length-2
  end
  def to_fraction
    higher = 10**self.number_decimal_places
    lower = self*higher
    gcden = greatest_common_divisor(higher, lower)

    return (lower/gcden).round, (higher/gcden).round
  end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is just an initial attempt but I&amp;#8217;m actually quite happy with how it turned out, especially since I can copy the text and not have it also copy the numbers.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Details&lt;/div&gt;
&lt;p&gt;So how does this work? Well, from looking at Ivan&amp;#8217;s branch, it appeared that the line numbers were set through a global variable. Instead, I figured that sometimes you may want line numbers and other times you may not, so I rewrote the code to detect for a classname called &amp;#8220;lineNumbers&amp;#8221; and if it detects that class then it applies line numbering.&lt;/p&gt;

&lt;p&gt;For example, if I want code without line numbering I write my HTML like:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='css'&gt;&amp;lt;pre&amp;gt;
&amp;lt;code class=&quot;java&quot;&amp;gt;
System.out.println(&quot;hello&quot;);
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otherwise, if I do want line numbering, I just add a &amp;#8220;lineNumbers&amp;#8221; class:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='css'&gt;&amp;lt;pre&amp;gt;
&amp;lt;code class=&quot;java lineNumbers&quot;&amp;gt;
System.out.println(&quot;hello&quot;);
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class='mSpotlight'&gt;Github Fork&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;re interested in having this for your site, I forked the Highlight.js 7.3 code and added the changes at &lt;a href='https://github.com/minhongrails/highlight.js'&gt;https://github.com/minhongrails/highlight.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A couple of tips to build the JS library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you have Python3 installed so you can run &amp;#8220;python3 tools/build.py.&amp;#8221; Initially I encountered errors building with Python2.&lt;/li&gt;

&lt;li&gt;By default, the build creates a highlight.js that supports lots of languages, which makes it somewhat heavy at 122KB+. I personally just used &amp;#8220;python3 tools/build.py :common&amp;#8221; to support the most popular languages.&lt;/li&gt;

&lt;li&gt;The highlight.js is produced in the build directory.&lt;/li&gt;

&lt;li&gt;Run &amp;#8220;python3 tools/build.py -h&amp;#8221; if you need further help and of course visit the highlight.js site for official documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should review the changes described at &lt;a href='https://github.com/isagalaev/highlight.js/compare/line-numbers'&gt;https://github.com/isagalaev/highlight.js/compare/line-numbers&lt;/a&gt; and in particular the CSS that you will need to add.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/08/17/highlightjs-line-numbers</link>
                <guid>http://www.minh.io/tech/2013/08/17/highlightjs-line-numbers</guid>
                <pubDate>2013-08-17T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Measuring code quality</title>
                <description>&lt;p&gt;Sonar/SonarQube is a great platform for measuring &lt;a href='http://www.sonarqube.com' target='_blank'&gt;code quality&lt;/a&gt;. It calculates lines of code, source quality, test quality, and numerous other metrics. Recently, I used Sonar to calculate unit and integration test coverage across multiple Maven Java modules with TestNG and Jacoco:&lt;/p&gt;
&lt;img alt='sonar_screen.png' src='/assets/img/sonar/sonar_code_coverage.png' /&gt;
&lt;p&gt;It actually took quite a bit of effort to get this to work but &lt;a href='http://www.kubrynski.com/2013/03/measuring-overall-code-coverage-in.html' target='_blank'&gt;Jakub Kubrynski's post&lt;/a&gt; helped greatly, so all credit should go to him. However, I wanted to create a template for future projects, so I created this mini guide and a &lt;a href='https://github.com/minhongrails/multimoduleSonar' target='_blank'&gt;Github project&lt;/a&gt; so that others could also get this working:&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Install SonarQube&lt;/div&gt;
&lt;p&gt;These are the instructions from the &lt;a href='http://docs.codehaus.org/display/SONAR/Get+Started+in+Two+Minutes' target='_blank'&gt;2-minute quickstart guide&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; &lt;a href='http://www.sonarsource.org/downloads/' target='_blank'&gt;Download&lt;/a&gt; 
and unzip the SonarQube distribution (ex: &quot;/etc/sonar&quot; or &quot;C:\sonar&quot;). I used 3.6.2
but it seems that multi-module support was implemented &lt;a href='http://docs.codehaus.org/display/SONAR/Analyzing+with+Maven' target='_blank'&gt;since 3.3&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt; Start the SonarQube server 
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;# On Windows, execute:
C:\sonar\bin\windows-x86-xx\StartSonar.bat
 
# On other operating system, execute:
/etc/sonar/bin/[OS]/sonar.sh console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Navigate to &lt;a href='http://localhost:9000' target='_blank'&gt;http://localhost:9000&lt;/a&gt; to verify 
that Sonar has successfully loaded.&lt;/li&gt;

&lt;li&gt;(Optional) If you care about integration test coverage, you should enable
that widget on your dashboard. Here's a &lt;a href='http://docs.codehaus.org/display/SONAR/Code+Coverage+by+Integration+Tests+for+Java+Project' target='_blank'&gt;guide&lt;/a&gt;.
&lt;/li&gt;

&lt;li&gt;Checkout a sample multimoduleSonar project on &lt;a href='https://github.com/minhongrails/multimoduleSonar' target='_blank'&gt;github&lt;/a&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;git clone https://github.com/minhongrails/multimoduleSonar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt; Run unit tests and archive results in sonar
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;mvn install sonar:sonar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

Alternatively, run integration tests as well:
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;mvn install sonar:sonar -DskipIT=false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Load the &lt;a href='http://localhost:9000' target='_blank'&gt;Sonar GUI&lt;/a&gt; in your browser and you should see
a project called &quot;parent.&quot; Clicking that should show the following:
&lt;br /&gt;&lt;br /&gt;
&lt;a href='/assets/img/sonar/sonar_screen.png' target='_blank'&gt;&lt;img alt='sonar_screen.png' src='/assets/img/sonar/sonar_screen.png' /&gt;&lt;/a&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;div class='mSpotlight'&gt;Deep Dive&lt;/div&gt;
&lt;p&gt;The sample Maven structure was designed to be simple. There is a single parent project which contains two submodules module1 and module2.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s some class diagrams:&lt;/p&gt;
&lt;img alt='sonar_uml.png' src='/assets/img/sonar/sonar_uml.png' /&gt;</description>
                <link>http://www.minh.io/tech/2013/08/03/sonar-code-quality</link>
                <guid>http://www.minh.io/tech/2013/08/03/sonar-code-quality</guid>
                <pubDate>2013-08-03T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Automated documentation</title>
                <description>&lt;p&gt;Software documentation is terrible in general. Most of the time it&amp;#8217;s missing, out of date, or just plain incorrect. Usually it&amp;#8217;s because documentation is a pain to write or there&amp;#8217;s simply no time.&lt;/p&gt;

&lt;p&gt;Alas, while writing documentation may be tedious, that&amp;#8217;s usually where software automation shines. In this post, I&amp;#8217;ll share my experiences with automatic JavaDoc and UML documentation through Maven and a semi-free tool called &lt;a href='http://www.yworks.com/en/products_ydoc.html' target='_blank'&gt;yWorks UML Doclet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created an example project on &lt;a href='https://github.com/minhongrails/multimoduleJavadocUML' target='_blank'&gt;GitHub&lt;/a&gt; (also on &lt;a href='https://bitbucket.org/mnguyen3/multimodulejavadocuml' target='_blank'&gt;BitBucket&lt;/a&gt; since GitHub seems to be down sometimes) to show how to generate UML and nice looking documentation automatically.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Install Guide&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Download &lt;a href='http://www.yworks.com/en/products_ydoc.html#download' target='_blank'&gt;yWorks UML Doclet&lt;/a&gt; and extract
it to a directory.&lt;/li&gt;

&lt;li&gt;Set an environment variable YWORKS_HOME to point to the extracted directory.&lt;/li&gt;

&lt;li&gt;Clone the sample GitHub repo:
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;git clone https://github.com/minhongrails/multimoduleJavadocUML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Build the project and execute
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;mvn clean install site&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class='mSpotlight'&gt;Results&lt;/div&gt;
&lt;p&gt;If everything worked out well, you should be able to navigate to &lt;a href='http://doc1.minh.io' target='_blank'&gt;target/site/apidocs/index.html&lt;/a&gt; and you&amp;#8217;ll see UML automagically generated like this:&lt;/p&gt;
&lt;img alt='uml.png' src='/assets/img/yworks/uml.png' /&gt;</description>
                <link>http://www.minh.io/tech/2013/08/01/automated-documentation</link>
                <guid>http://www.minh.io/tech/2013/08/01/automated-documentation</guid>
                <pubDate>2013-08-01T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Ruby XML</title>
                <description>&lt;p&gt;In this post I wanted to go over some options for generating XML with Ruby. More specifically I wanted to show sample input and output for the Builder gem as well as the &lt;a href='http://www.germane-software.com/software/rexml/'&gt;REXML&lt;/a&gt; library. Although the existing Builder &lt;a href='http://builder.rubyforge.org/' target='_blank'&gt;official documentation&lt;/a&gt; provides a good overview, in my opinion it doesn&amp;#8217;t provide enough examples of input and output.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s an example of how to create some XML with an attribute:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='ruby'&gt;#!/usr/bin/ruby
require 'builder'

class XMLGenerator
	def generate()
		xml = Builder::XmlMarkup.new( :indent =&gt; 2 ) 
		xml.instruct! :xml, :encoding =&gt; &quot;ASCII&quot;
		xml.tag!('automobile', {&quot;type&quot;=&gt;&quot;car&quot;}) do
		end
	end		
end

generator = XMLGenerator.new()
puts generator.generate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#8217;s what that program will output:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='xml'&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ASCII&quot;?&amp;gt;
&amp;lt;automobile type=&quot;car&quot;&amp;gt;
&amp;lt;/automobile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;And of course you can add more attributes and more elements:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='ruby'&gt;#!/usr/bin/ruby
require 'builder'

class XMLGenerator
	def generate()
		xml = Builder::XmlMarkup.new( :indent =&gt; 2 ) 
		xml.instruct! :xml, :encoding =&gt; &quot;ASCII&quot;
		xml.tag!('automobile', {&quot;type&quot;=&gt;&quot;car&quot;}, {&quot;color&quot;=&gt;&quot;red&quot;}) do
			xml.engine &quot;v8&quot;
		end
	end		
end

generator = XMLGenerator.new()
puts generator.generate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='xml'&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ASCII&quot;?&amp;gt;
&amp;lt;automobile type=&quot;car&quot;&amp;gt;
  &amp;lt;engine&amp;gt;v8&amp;lt;/engine&amp;gt;
&amp;lt;/automobile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;And here&amp;#8217;s the rexml equivalent of the Builder gem:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='ruby'&gt;#!/usr/bin/ruby

require &quot;rexml/document&quot;

class XMLGenerator
	def generate()
		doc = REXML::Document.new
		automobile = doc.add_element(&quot;automobile&quot;,
			{ &quot;type&quot;=&gt;&quot;car&quot;})
		engine = automobile.add_element(&quot;engine&quot;)
		engine.add_element(&quot;v8&quot;)
		doc
	end

	def prettyPrint()
		formatter = REXML::Formatters::Pretty.new(2)
		formatter.compact = true
		formatter.write(generate(), STDOUT)
	end
end

generator = XMLGenerator.new()
generator.prettyPrint()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which generates the following output:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='xml'&gt;&amp;lt;automobile type='car'&amp;gt;
  &amp;lt;engine&amp;gt;
    &amp;lt;v8/&amp;gt;
  &amp;lt;/engine&amp;gt;
&amp;lt;/automobile&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having used both libraries, I prefer REXML because it&amp;#8217;s part of the standard Ruby library and its code is easier to read.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/07/08/ruby-xml</link>
                <guid>http://www.minh.io/tech/2013/07/08/ruby-xml</guid>
                <pubDate>2013-07-08T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Tutorial: PDF image extraction</title>
                <description>&lt;p&gt;In my effort to give back to open source, I&amp;#8217;m going to start writing tutorials and sample code on GitHub for snippets of code that I&amp;#8217;ve written or used. This particular tutorial will cover how to extract images from a PDF, store them to a folder, and execute everything from the command line.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Background&lt;/div&gt;
&lt;p&gt;Initially I looked at &lt;a href='http://pdfbox.apache.org/'&gt;Apache PDFBox&lt;/a&gt;, which looked great because of its Apache license. Unfortunately, it didn&amp;#8217;t meet my rule of &amp;#8220;must work in under 15 minutes.&amp;#8221; Next I looked at &lt;a href='http://itextpdf.com/'&gt;iTextPDF&lt;/a&gt;, which unfortunately has an &lt;a href='http://itextpdf.com/terms-of-use/agpl.php'&gt;AGPL license&lt;/a&gt; but nonetheless had better documentation and I was able to get it working very fast.&lt;/p&gt;

&lt;p&gt;A quick Google search for &amp;#8220;iText extract images&amp;#8221; gave several results such as &lt;a href='http://stackoverflow.com/questions/7007917/how-to-extract-images-from-a-pdf-with-itext-in-the-correct-order'&gt;a Stackoverflow post&lt;/a&gt; and the excellent &lt;a href='http://itextpdf.com/examples/iia.php?id=284'&gt;iText ExtractImages tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I initially tried the Stackoverflow example because its code was concise but found an issue where it would sometimes output files in the wrong format (not every image is a jpeg) or not extract certain images correctly. Therefore I tried the official ExtractImages tutorial and that mostly worked.&lt;/p&gt;

&lt;p&gt;However, there was a few modifications I needed to add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added capability to easily run the program from the command line&lt;/li&gt;

&lt;li&gt;Added Maven so that everything can be quickly set up to be run into an IDE with all dependencies downloaded.&lt;/li&gt;

&lt;li&gt;I noticed that some images came out with inverted colors, so I may come back to fix that later.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='mSpotlight'&gt;Quickstart&lt;/div&gt;
&lt;p&gt;I created a &lt;a href='https://github.com/minhongrails/iTextTutorials'&gt;sample Github project&lt;/a&gt;, which can be executed with the following steps assuming you have Maven and git installed:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;git clone https://github.com/minhongrails/iTextTutorials
cd iTextTutorials
mvn install exec:exec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program will use the default settings and extract 4 images from the included NASA PDF to the &amp;#8220;target&amp;#8221; directory.&lt;/p&gt;

&lt;p&gt;Parameters can also be passed in through &amp;#8220;src&amp;#8221; and &amp;#8220;dest&amp;#8221;:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;mvn exec:exec -Dsrc=/dir1/file.pdf -Ddest=/dir1/output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, if you use NetBeans or Eclipse, it&amp;#8217;s very simple to get the project files set up with all of the dependencies so that you&amp;#8217;re ready to start coding:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='bash'&gt;mvn eclipse:eclipse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='mSpotlight'&gt;Code&lt;/div&gt;
&lt;p&gt;Everything is available on GitHub but this section will show the code if you don&amp;#8217;t like GitHub or Maven for some reason:&lt;/p&gt;

&lt;p&gt;First, add the dependency to your Maven pom:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='no-highlight'&gt;&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.itextpdf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;itextpdf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.3&amp;lt;/version&amp;gt;
            &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, create an ImageRenderListener.java file:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='java'&gt;package io.minh.iText.image;

import java.io.FileOutputStream;
import java.io.IOException;

import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.PdfImageObject;
import com.itextpdf.text.pdf.parser.RenderListener;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Saves images to a directory.
 *
 * @author mnguyen
 */
public class ImageRenderListener implements RenderListener {

    /**
     * The directory path to store images.
     */
    protected String path;

    /**
     * Creates a RenderListener that will look for images.
     */
    public ImageRenderListener(String path) {
        this.path = path;
    }

    /**
     * @see com.itextpdf.text.pdf.parser.RenderListener#beginTextBlock()
     */
    @Override
    public void beginTextBlock() {
    }

    /**
     * @see com.itextpdf.text.pdf.parser.RenderListener#endTextBlock()
     */
    @Override
    public void endTextBlock() {
    }

    /**
     * @see com.itextpdf.text.pdf.parser.RenderListener#renderImage(
     * com.itextpdf.text.pdf.parser.ImageRenderInfo)
     */
    @Override
    public void renderImage(ImageRenderInfo renderInfo) {
        try {
            String filename;
            FileOutputStream os;
            PdfImageObject image = renderInfo.getImage();
            if (image == null) {
                return;
            }
            filename = String.format(path, renderInfo.getRef().getNumber(), image.getFileType());
            System.out.println(&quot;Writing image to file: &quot; + filename);
            os = new FileOutputStream(filename);
            os.write(image.getImageAsBytes());
            os.flush();
            os.close();
        } catch (IOException e) {
            Logger.getLogger(ImageRenderListener.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    /**
     * @see com.itextpdf.text.pdf.parser.RenderListener#renderText(
     * com.itextpdf.text.pdf.parser.TextRenderInfo)
     */
    @Override
    public void renderText(TextRenderInfo renderInfo) {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, create an ExtractImages.java file:&lt;/p&gt;
&lt;div&gt;&lt;pre class='prettyprint'&gt;&lt;code class='java'&gt;package io.minh.iText.image;

import java.io.IOException;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfReaderContentParser;

/**
 * Extracts images from a PDF file.
 */
public class ExtractImages {

    /**
     * PDF to extract images from
     */
    public static final String SOURCE_PDF = &quot;src/main/resources/354470main_aresIX_fs_may09.pdf&quot;;

    /**
     * Parses a PDF and extracts all the images.
     *
     * @param filename the source PDF
     * @param destination the directory to save images
     */
    public void extractImages(String filename, String destination)
            throws IOException, DocumentException {
        System.out.println(&quot;Processing PDF at &quot; + filename);
        System.out.println(&quot;Saving images to &quot; + destination);

        PdfReader reader = new PdfReader(filename);
        PdfReaderContentParser parser = new PdfReaderContentParser(reader);
        ImageRenderListener listener = new ImageRenderListener(destination + &quot;/Img%s.%s&quot;);
        for (int i = 1; i &amp;lt;= reader.getNumberOfPages(); i++) {
            parser.processContent(i, listener);
        }
        reader.close();
    }

    /**
     * Main method.
     *
     * @param args no arguments needed
     * @throws DocumentException
     * @throws IOException
     */
    public static void main(String[] args) throws IOException, DocumentException {
        String sourcePDF = SOURCE_PDF;
        String destination = &quot;target&quot;;
        if (args.length &amp;gt; 0) {
            sourcePDF = args[0];
            if (args.length &amp;gt; 1) {
                destination = args[1];
            }
        }

        new ExtractImages().extractImages(sourcePDF, destination);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://www.minh.io/tech/2013/07/06/tutorialpdf-image-extraction</link>
                <guid>http://www.minh.io/tech/2013/07/06/tutorialpdf-image-extraction</guid>
                <pubDate>2013-07-06T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Cowsay</title>
                <description>


&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;bash&quot;&gt; _____ 
&lt; hey &gt;
 ----- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
&lt;/code&gt;
&lt;/pre&gt;

..Yeah. Stay tuned for more brilliant posts like this.

&lt;p&gt;&lt;p&gt;By the way, the above cow was created by &lt;a href=&quot;http://en.wikipedia.org/wiki/Cowsay&quot;&gt;Cowsay&lt;/a&gt;, which is a command line program to create ASCII artwork. Every developer should add this very important tool to their command line
    and on a Mac with homebrew it's super easy:&lt;/p&gt;
    
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;bash&quot;&gt;brew install cowsay
cowsay &quot;hey&quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://www.minh.io/2013/07/05/cowsay</link>
                <guid>http://www.minh.io/2013/07/05/cowsay</guid>
                <pubDate>2013-07-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>New design - part II</title>
                <description>&lt;p&gt;It seems that I update this blog&amp;#8217;s design nearly every month. Well, this month is no exception and here&amp;#8217;s the latest changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved readability by increasing font sizes and improving contrast&lt;/li&gt;

&lt;li&gt;Added background to improve contrast / readability&lt;/li&gt;

&lt;li&gt;Added CSS3 floating stars/snow on the About and Projects pages. The effect slows down scrolling in Chrome and Firefox so I only limited it to those pages. Interestingly, Safari had the best performance of all 3 browsers. This effect was taken from &lt;a href='http://pixelunion.net/'&gt;Pixel Union&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This design change is still a work in progress but for reference, below is the older &lt;a href='http://design4.minh.io'&gt;2.5 release&lt;/a&gt;.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/07/04/new-design-again</link>
                <guid>http://www.minh.io/tech/2013/07/04/new-design-again</guid>
                <pubDate>2013-07-04T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Mac PIL decoder jpeg not available</title>
                <description>&lt;p&gt;Recently when using the Python Image Library (PIL) I encountered an &amp;#8220;IOError: decoder jpeg not available&amp;#8221; error. Apparently to resolve it I needed to uninstall PIL, install libjpeg, and then reinstall PIL:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;pip uninstall PIL
brew install libjpeg
pip install PIL&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://www.minh.io/tech/2013/06/30/python-pil-decoder-jpeg-not-available</link>
                <guid>http://www.minh.io/tech/2013/06/30/python-pil-decoder-jpeg-not-available</guid>
                <pubDate>2013-06-30T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Infinite Startup and Inaccessible VM</title>
                <description>&lt;p&gt;In this post I wanted to document some issues I recently encountered.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;VMware Fusion guest inaccessible from host&lt;/div&gt;
&lt;p&gt;Sometimes when I get a VM I need to change its network settings so that it&amp;#8217;s visible to the internet as well as other machines on the network. Typically I set my VM to use bridged networking and then configure it to use DHCP so that it&amp;#8217;s assigned an IP by my network.&lt;/p&gt;

&lt;p&gt;It depends on the operating system and VM but for &lt;a href='http://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-dhcp-configuring-client.html'&gt;CentOS6.4&lt;/a&gt;, in order to enable DHCP on a bridged VM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify &lt;b&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/b&gt; to have the following settings:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Modify &lt;b&gt;/etc/sysconfig/network&lt;/b&gt; to have the following settings:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;NETWORKING=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Also, don&amp;#8217;t forget to restart the network for the changes to take effect:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Additionally, &lt;b&gt;/etc/hosts&lt;/b&gt; may need to be updated with the new IP address, or else you may encounter the next issue&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='mSpotlight'&gt;Linux Startup Script Loops Forever&lt;/div&gt;
&lt;p&gt;If you ever boot up a VM and encounter a messed up startup script (e.g. one that loops infinitely attempting to connect to an unknown host/IP) then the key is to start the VM in &lt;a href='http://www.centos.org/docs/5/html/Installation_Guide-en-US/s1-rescuemode-booting-single.html' target='_blank'&gt;&quot;single user mode&quot;&lt;/a&gt;. For CentOS I just kept pressing a key on bootup and then entered GRUB mode. After that I appended the &amp;#8220;single&amp;#8221; keyword and was able to log into the system to fix the startup script.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/06/24/infinite-startup-and-inaccessible-vm</link>
                <guid>http://www.minh.io/tech/2013/06/24/infinite-startup-and-inaccessible-vm</guid>
                <pubDate>2013-06-24T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Highlight.js vs SyntaxHighlighter</title>
                <description>&lt;div class='mSpotlight'&gt;Update 2/1/14&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve &lt;a href='/tech/2014/01/30/prettyprint-syntax-highlighting/'&gt;changed syntax highlighters&lt;/a&gt;, so see &lt;a href='http://design7.minh.io/tech/2013/06/23/highlightjs-vs-syntaxhighlighter/'&gt;this version&lt;/a&gt;, which uses Highlight.js&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Summary&lt;/div&gt;
&lt;p&gt;In this post I want to compare two syntax highlighters: &lt;a href='http://softwaremaniacs.org/soft/highlight/en/' target='_blank'&gt;Highlight.js&lt;/a&gt; and &lt;a href='http://alexgorbatchev.com/SyntaxHighlighter/' target='_blank'&gt;Syntax Highlighter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For whatever reason I cannot understand at the moment, even though I already had Highlight.js in my blog I decided to try out &lt;a href='http://alexgorbatchev.com/SyntaxHighlighter/' target='_blank'&gt;Syntax Highlighter&lt;/a&gt;, which is another nice looking code highlighter. Maybe it was because I wanted to change things after I stumbled across the builtin syntax highlighting in &lt;a href='http://octopress.org/docs/blogging/code/' target='_blank'&gt;Octopress&lt;/a&gt; or another great application of the &lt;a href='http://ethanschoonover.com/solarized' target='_blank'&gt;Solarized&lt;/a&gt; syntax highlighter at &lt;a href='http://thanpol.as/jekyll/jekyll-code-highlight-and-line-numbers-problem-solved/' target='_blank'&gt;Thanpol.as&lt;/a&gt;. Perhaps it was because it was late at night and I didn&amp;#8217;t realize I could change from the default highlight.js theme to its Solarized theme.&lt;/p&gt;

&lt;p&gt;Nonetheless, I switched from HighlightJS to SyntaxHighlighter &lt;a href='http://design3.minh.io/tech/2013/05/13/maven3-on-ubuntu-1304/' target='_blank'&gt;briefly&lt;/a&gt; but decided to switch back because:&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Syntax Highlighter requires more imports&lt;/div&gt;
&lt;p&gt;You need to import lots of different brushes for different languages. Highlight.js only has 2 imports and you can even use a CDN like Yandex so it&amp;#8217;s really only a couple lines to start using it.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Syntax Highlighter is noticeably slower&lt;/div&gt;
&lt;p&gt;For whatever reason, despite my best efforts, Syntax Highlighter always seems to take a moment after loading the page before it applies styling, which means that a user will briefly see the unhighlighted code. I noticed this both in official examples as well as other sites.&lt;/p&gt;

&lt;p&gt;Highlight.js, however, worked out of the box and I didn&amp;#8217;t notice anything similar.&lt;/p&gt;
&lt;div class='mSpotlight'&gt;Highlight.js' Solarized theme is brilliant&lt;/div&gt;&lt;pre class='prettyprint'&gt;
&lt;code class='ruby'&gt;class Float
  def number_decimal_places
    self.to_s.length-2
  end
  def to_fraction
    higher = 10**self.number_decimal_places
    lower = self*higher
    gcden = greatest_common_divisor(higher, lower)

    return (lower/gcden).round, (higher/gcden).round
  end

private
  def greatest_common_divisor(a, b)
     while a%b != 0
       a,b = b.round,(a%b).round
     end
     return b
  end
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Next up, I&amp;#8217;ll work on figuring out how to add line numbers&amp;#8230;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update 8/17/13: &lt;a href='/tech/2013/08/17/highlightjs-line-numbers/'&gt;I figured out the line numbers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
                <link>http://www.minh.io/tech/2013/06/23/highlightjs-vs-syntaxhighlighter</link>
                <guid>http://www.minh.io/tech/2013/06/23/highlightjs-vs-syntaxhighlighter</guid>
                <pubDate>2013-06-23T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Github ssh authentication error</title>
                <description>&lt;p&gt;This post is more for myself since I always get SSH authentication errors when using SourceTree and GitHub after rebooting since I forget to ssh-add my github ssh key.&lt;/p&gt;

&lt;p&gt;If anyone out there encounters ssh auth errors, the command to add your key is:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Where id_rsa is typically the name of your private ssh key. Ideally it would&amp;#8217;ve been nice to add that line to my /etc/profile or .bashrc so that it&amp;#8217;s automatically run but that would also require storing my password (someone correct me if I&amp;#8217;m wrong), so meh.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/06/18/github-ssh-authentication-error</link>
                <guid>http://www.minh.io/tech/2013/06/18/github-ssh-authentication-error</guid>
                <pubDate>2013-06-18T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Java 7 certification</title>
                <description>&lt;p&gt;In this post I wanted to share my experience with the &lt;a href='http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&amp;amp;get_params=p_track_id:JSE7Prog'&gt;Java 7 1Z0-803 certification&lt;/a&gt;. There are probably naysayers who will say that certifications are worthless but I&amp;#8217;ve actually found that combining formal education with practical experience leads to the best results. It also doesn&amp;#8217;t hurt to have an extra credential to show that you aren&amp;#8217;t some newb.&lt;/p&gt;

&lt;p&gt;So far, my plan is to do the practice exams since I should know the material given the number of years I&amp;#8217;ve been using Java (more than 6?). Then once I complete the exams I&amp;#8217;ll focus on my weak areas and repeat the process. Luckily as an Amazon Prime user and Kindle owner I was able to borrow from the Kindle library for &amp;#8220;free.&amp;#8221; I found great reviews of &lt;a href='http://www.amazon.com/Certified-Associate-Programmer-Practice-ebook/dp/B007SA1GNU' target='_blank'&gt;OCAJP Oracle Certified Associate Java SE 7 Programmer Practice Exams [Kindle Edition]&lt;/a&gt; so I borrowed that and started my first exam.&lt;/p&gt;

&lt;p&gt;My first exam sucked. I spent ~4 hours answering 90 questions and scored 47/90 or 52%. On the real test, I would need to complete the exam in 2 hours 20 minutes and score at least 77%. To my credit, though, I checked my answers as I went along and I kind of rushed through several questions. Nonetheless, it showed that I still have some work to do and can&amp;#8217;t just breeze through this test with just a day of studying.&lt;/p&gt;

&lt;p&gt;I still have 5 more exams to go so I&amp;#8217;ll update this post as I complete more exams and do the actual test. In a future post I may also cover some Java quirks that caught me off guard.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/06/15/java-7-certification</link>
                <guid>http://www.minh.io/tech/2013/06/15/java-7-certification</guid>
                <pubDate>2013-06-15T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>New design</title>
                <description>&lt;p&gt;Recently I decided to change my design, so I greatly simplified everything (removed Isotope, distracting colors) and focused on large, readable fonts.&lt;/p&gt;

&lt;p&gt;I found inspiration from &lt;a href='http://www.medium.com' target='_blank'&gt;Medium&lt;/a&gt;, which has beautiful typography for optimal readability on all sorts of screens. I also came across Zach Holman&amp;#8217;s &lt;a href='http://zachholman.com' target='_blank'&gt;web site&lt;/a&gt; and so I &amp;#8220;borrowed&amp;#8221; some of his design elements. Lastly, the new design also was heavily influenced by Apple.com and a Tumblr blog called &lt;a href='http://all-thats-interesting.tumblr.com/' target='_blank'&gt;&quot;all that's interesting.&quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m still not entirely satisfied with my design so of course I&amp;#8217;ll be updating it again in the future. In particular, I want to make it less boring and add images or color.&lt;/p&gt;

&lt;p&gt;For reference, I backed up my old design &lt;a href='http://design2.minh.io' target='_blank'&gt;here.&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/06/09/new-design</link>
                <guid>http://www.minh.io/tech/2013/06/09/new-design</guid>
                <pubDate>2013-06-09T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>New Color Project</title>
                <description>
Recently I came across &lt;a href=&quot;http://www.ianli.com/isee/make.php&quot; target=&quot;_blank&quot;&gt;Ian Li's &quot;I See&quot;&lt;/a&gt;
project which visualizes text through different colors. It looked awesome and I
found myself fascinated trying to associate colors with text. Naturally, I had to 
create my own version of it, so here's my &lt;a href=&quot;http://color.minh.io&quot;&gt;attempt&lt;/a&gt;:
&lt;br&gt;
&lt;br&gt;
&lt;center&gt;&lt;a href=&quot;http://color.minh.io&quot;&gt;&lt;img src=&quot;/assets/img/color_large.jpg&quot; alt=&quot;color_large.jpg&quot; title=&quot;Launch Color&quot;&gt;&lt;/a&gt;&lt;/center&gt;
&lt;br&gt;

It actually took quite a bit of effort to build this but overall it
turned out decently. I got a chance to play with Raphael JS and perform
hue transforms on RGB colors (yay matrix math). There's still some things I want
to do so that I'm not totally just copying Ian's project so I'll update
this again later.

Anyway, I did a little research and apparently there's a lot of &lt;a href=&quot;http://www.color-wheel-pro.com/color-meaning.html&quot; target=&quot;_blank&quot;&gt;meaning&lt;/a&gt; behind colors.
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;Here's a table of the common colors&lt;/p&gt;
&lt;table class=&quot;table table-bordered colorTable&quot;&gt;
    &lt;tr bgcolor=&quot;#f9f9f9&quot;&gt;
        &lt;td&gt;Color&lt;/td&gt;
        &lt;td&gt;Name&lt;/td&gt;
        &lt;td&gt;Meaning&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FF0000&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Red&lt;/td&gt;
        &lt;td&gt;energy, war, danger, strength, power, determination&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FFA500&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Orange&lt;/td&gt;
        &lt;td&gt;enthusiasm, fascination, happiness, creativity, determination, attraction, success, encouragement, and stimulation&lt;/td&gt;
    &lt;/tr&gt;   
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FFFF00&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Yellow&lt;/td&gt;
        &lt;td&gt;joy, happiness, intellect, and energy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#008000&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Green&lt;/td&gt;
        &lt;td&gt;growth, harmony, freshness, and fertility&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#0000FF&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Blue&lt;/td&gt;
        &lt;td&gt;depth and stability; trust, loyalty, wisdom, confidence, intelligence, faith, truth, and heaven&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td bgcolor=&quot;#800080&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Purple&lt;/td&gt;
        &lt;td&gt;power, nobility, luxury, ambition, wisdom, dignity, independence, creativity, mystery, and magic &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#fff&quot;&gt;&lt;/td&gt;
        &lt;td&gt;White&lt;/td&gt;
        &lt;td&gt;light, goodness, innocence, purity, and virginity&lt;/td&gt;
    &lt;/tr&gt;  
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#000&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Black&lt;/td&gt;
        &lt;td&gt;power, elegance, formality, death, evil, and mystery&lt;/td&gt;
    &lt;/tr&gt;  


&lt;/table&gt;

&lt;p&gt;Here's a table of the less common colors&lt;/p&gt;
&lt;table class=&quot;table table-bordered colorTable&quot;&gt;
    &lt;tr bgcolor=&quot;#f9f9f9&quot;&gt;
        &lt;td&gt;Color&lt;/td&gt;
        &lt;td&gt;Name&lt;/td&gt;
        &lt;td&gt;Meaning&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#8B0000&quot;&gt;&lt;/td&gt;
        &lt;td&gt;DarkRed&lt;/td&gt;
        &lt;td&gt;vigor, willpower, rage, anger, leadership, courage, longing, malice, and wrath&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FFB6C1&quot;&gt;&lt;/td&gt;
        &lt;td&gt;LightPink&lt;/td&gt;
        &lt;td&gt;joy, sexuality, passion, sensitivity, and love&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FF4500&quot;&gt;&lt;/td&gt;
        &lt;td&gt;OrangeRed&lt;/td&gt;
        &lt;td&gt;desire, sexual passion, pleasure, domination, aggression, and thirst for action&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FF8C00&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Darkorange&lt;/td&gt;
        &lt;td&gt;deceit and distrust&lt;/td&gt;
    &lt;/tr&gt; 
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FFFFE0&quot;&gt;&lt;/td&gt;
        &lt;td&gt;LightYellow&lt;/td&gt;
        &lt;td&gt;intellect, freshness, and joy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#006400&quot;&gt;&lt;/td&gt;
        &lt;td&gt;DarkGreen&lt;/td&gt;
        &lt;td&gt;ambition, greed, and jealousy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#9ACD32&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Yellowgreen&lt;/td&gt;
        &lt;td&gt;sickness, cowardice, discord, and jealousy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#FF8C00&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Darkorange&lt;/td&gt;
        &lt;td&gt;deceit and distrust&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td bgcolor=&quot;#00FFFF&quot;&gt;&lt;/td&gt;
        &lt;td&gt;Aqua&lt;/td&gt;
        &lt;td&gt;emotional healing and protection&lt;/td&gt;
    &lt;/tr&gt; 

    &lt;tr&gt;
        &lt;td bgcolor=&quot;#556B2F&quot;&gt;&lt;/td&gt;
        &lt;td&gt;DarkOliveGreen&lt;/td&gt;
        &lt;td&gt;peace&lt;/td&gt;
    &lt;/tr&gt; 

&lt;/table&gt;


Another area I'm very interested in exploring is image processing and in particular
the ability to create filters to add different color tones to images.

&lt;style&gt;

    .colorTable td {
        text-align:center;
    }
&lt;/style&gt;
</description>
                <link>http://www.minh.io/tech/2013/06/02/color</link>
                <guid>http://www.minh.io/tech/2013/06/02/color</guid>
                <pubDate>2013-06-02T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Experiments with Isotope</title>
                <description>&lt;p&gt;In this post, I wanted to describe a new feature that I developed to solve a UI problem with my blog: there&amp;#8217;s way too many posts on random subjects that nobody cares about. I can&amp;#8217;t really do much about the content but at the very least I can provide a mechanism for users to filter my posts for content that interests them. So, without further ado, I created an experimental page using the &lt;a href='http://isotope.metafizzy.co/' target='_blank'&gt;Isotope framework&lt;/a&gt; as a method for filtering posts. You can check it out &lt;a href='http://test.minh.io' target='_blank'&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not one to brag too much but even though I coded it all tonight, my inspiration didn&amp;#8217;t come from a vacuum and instead I stumbled upon the idea after visiting the &lt;a href='http://www.amoveointeractive.com/index.html' target='_blank'&gt;Amoveo Interactive&lt;/a&gt; website. So, if I decide to put this into production, I&amp;#8217;ll make sure to thank Amoveo for the idea.&lt;/p&gt;

&lt;p&gt;Update 5/30/12: After testing Isotope for a day, I decided to put it into production even though its animations appear slightly choppy for certain browers like Safari on iOS and Firefox. I was able to speed up the animation through transition-duration so it&amp;#8217;s slightly less noticeable but it still is missing that polish I&amp;#8217;m looking for, so I may need to tweak this down the road or find an alternative.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/05/30/experiments-with-isotope</link>
                <guid>http://www.minh.io/tech/2013/05/30/experiments-with-isotope</guid>
                <pubDate>2013-05-30T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>MySQL, Play, and Scala</title>
                <description>&lt;p&gt;Recently I had a chance to try out the Play Framework&amp;#8217;s Computer Database sample, which shows database access, CRUD forms, and integration with a CSS framework. Out of the box it comes initialized with an H2 in-memory database, which is great for starting out because it requires no setup.&lt;/p&gt;

&lt;p&gt;However, for production, most users will want to use an actual database such as MySQL, Postgres, or anything else, since H2 does not persist data in between reloads of the server (imagine a server crash or simply updating your application &amp;#8211; you&amp;#8217;ll lose all your data!).&lt;/p&gt;

&lt;p&gt;Unfortunately, switching from H2 to MySQL was not a trivial task. The Play evolution scripts and models for the Computer Database sample actually do not work for MySQL, so there&amp;#8217;s some effort required in migrating databases. Luckily, before doing any significant work I did a Google search and came across an &lt;a href='https://github.com/opensas/openshift-play2-computerdb' target='_blank'&gt;Openshift github repo&lt;/a&gt; that solved this issue.&lt;/p&gt;

&lt;p&gt;It was slightly out of date and missing some instructions for MySQL, so I forked the repo and added instructions + configuration for setting up the sample with MySQL &lt;a href='https://github.com/minhongrails/play2-computerdb-mysql-scala' target='_blank'&gt;here&lt;/a&gt;. I also created up a demo application &lt;a href='http://dev1.minh.io' target='_blank'&gt;here&lt;/a&gt;, which I will probably migrate to Heroku or some other source.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/05/25/mysql-play-and-scala</link>
                <guid>http://www.minh.io/tech/2013/05/25/mysql-play-and-scala</guid>
                <pubDate>2013-05-25T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Setting up domain email</title>
                <description>&lt;p&gt;In this post I wanted to share how I changed my site&amp;#8217;s email from minhongrails@gmail.com to hello@minh.io. First, why create a domain email? Well, it lets you create any number of handles such as &amp;#8220;bah@minh.io&amp;#8221; and provides spam control for whenever you sign up at stores or other spammy places by hiding your actual email.&lt;/p&gt;

&lt;p&gt;Initially I considered Google Apps as an email host but then discovered it cost $5 a month. Next I looked at self-hosted mailing servers for my Linode but I decided against it due to server resource, security, and reliability concerns.&lt;/p&gt;

&lt;p&gt;Eventually I found out that my new domain host Gandi.net offered mailboxes for my registered domain, so I just added &amp;#8220;hello@minh.io&amp;#8221; as a mail service and forwarded my emails to my gmail account. I also added spool.mail.gandi.net and fb.mail.gandi.net to my Linode&amp;#8217;s MX records.&lt;/p&gt;

&lt;p&gt;Anyway, I tried out some test emails that were delivered nearly instantaneously so things look good so far but I&amp;#8217;ll update this post if I discover any issues down the road.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/05/23/setting-up-domain-email</link>
                <guid>http://www.minh.io/tech/2013/05/23/setting-up-domain-email</guid>
                <pubDate>2013-05-23T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Speeding up Nginx with PageSpeed</title>
                <description>&lt;p&gt;Today I had a chance to try out &lt;a href='https://developers.google.com/speed/pagespeed/mod' target='_blank'&gt;Google's PageSpeed&lt;/a&gt; tool for nginx, which &amp;#8220;rewrites your webpages to make them faster for your users. This includes compressing images, minifying CSS and JavaScript, extending cache lifetimes, and many other web performance best practices.&amp;#8221;&lt;/p&gt;

&lt;p&gt;This sounded great because it appeared to be a free and magical way of improving speeds with minimal effort. However, after spending a couple of hours using it I was disappointed because it was not simple to install and the performance boost was minimal. Granted I can probably tweak some settings so I&amp;#8217;m still optimistic.&lt;/p&gt;
&lt;b&gt;Performance Experiments&lt;/b&gt;
&lt;p&gt;I ran basic tests comparing 5 different pages using Pingdom&amp;#8217;s tools to measure the page load times and PageSpeed scores with mod_pagespeed enabled and disabled. Each test was run against the New York location and run at least 2 times with the best time being chosen (usually the pings didn&amp;#8217;t vary too much except in some cases)&lt;/p&gt;
&lt;br /&gt;&lt;table class='table table-striped table-bordered'&gt;
    &lt;tr&gt;
        &lt;td&gt;PageSpeed enabled&lt;/td&gt;
        &lt;td&gt;URL&lt;/td&gt;
        &lt;td&gt;PageSpeed score&lt;/td&gt;
        &lt;td&gt;# Requests&lt;/td&gt;
        &lt;td&gt;Load time (ms)&lt;/td&gt;
        &lt;td&gt;Size (kb)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;dev1.minh.io&lt;/td&gt;
        &lt;td&gt;88/100&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;130&lt;/td&gt;
        &lt;td&gt;10.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;dev1.minh.io&lt;/td&gt;
        &lt;td&gt;75/100&lt;/td&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;145&lt;/td&gt;
        &lt;td&gt;10.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;dev2.minh.io&lt;/td&gt;
        &lt;td&gt;94/100&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;209&lt;/td&gt;
        &lt;td&gt;102.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;dev2.minh.io&lt;/td&gt;
        &lt;td&gt;83/100&lt;/td&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;246&lt;/td&gt;
        &lt;td&gt;102.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;dev3.minh.io&lt;/td&gt;
        &lt;td&gt;88/100&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;275&lt;/td&gt;
        &lt;td&gt;92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;dev3.minh.io&lt;/td&gt;
        &lt;td&gt;81/100&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;246&lt;/td&gt;
        &lt;td&gt;91.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;dev4.minh.io&lt;/td&gt;
        &lt;td&gt;88/100&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;114&lt;/td&gt;
        &lt;td&gt;7.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;dev4.minh.io&lt;/td&gt;
        &lt;td&gt;75/100&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;125&lt;/td&gt;
        &lt;td&gt;2.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;dev5.minh.io&lt;/td&gt;
        &lt;td&gt;96/100&lt;/td&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;204&lt;/td&gt;
        &lt;td&gt;74.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;dev5.minh.io&lt;/td&gt;
        &lt;td&gt;85/100&lt;/td&gt;
        &lt;td&gt;6&lt;/td&gt;
        &lt;td&gt;197&lt;/td&gt;
        &lt;td&gt;74.1&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;&lt;b&gt;Conclusion&lt;/b&gt;
&lt;p&gt;Overall, there were mixed results. My Google PageSpeed scores improved but sometimes latencies actually increased. I imagine this is because the tool takes time to perform its optimizations or maybe that the Pingdom tool caches results.&lt;/p&gt;

&lt;p&gt;For the effort taken and results shown I can&amp;#8217;t confidently recommend the tool at this time but it also could be because my server is mostly optimized already. In fact the greatest performance boost I noticed was gzip, which off the top of my head yielded 30-50% latency improvements.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll come back later and update this post as I use ngx_pagespeed some more.&lt;/p&gt;
&lt;br /&gt;&lt;b&gt;Install Notes&lt;/b&gt;
&lt;p&gt;In a perfect world it would&amp;#8217;ve nice to run something like &amp;#8220;apt-get install nginx_pagespeed&amp;#8221; but unfortunately it was more involved than that since nginx doesn&amp;#8217;t support dynamic loading of modules. For the most part I followed notes &lt;a href='http://serverfault.com/questions/502764/how-to-build-nginx-1-4-0-and-ngx-pagespeed-in-ubuntu-debian' target='_blank'&gt;here&lt;/a&gt; (thanks to PePe who wrote them) after reading the official notes which left me hanging. I&amp;#8217;ll update this post later with my revisions/notes to PePe&amp;#8217;s notes.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/05/21/speeding-up-nginx-with-google-pagespeed</link>
                <guid>http://www.minh.io/tech/2013/05/21/speeding-up-nginx-with-google-pagespeed</guid>
                <pubDate>2013-05-21T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Subdomains with Linode and Nginx</title>
                <description>&lt;p&gt;This post will show how I created subdomains on my Linode box with Nginx. Overall it was very easy and although I&amp;#8217;m using Linode and nginx as a reference, I assume this could be generalized with other types of domains and web servers. Take a look at one my subdomains @ &lt;a href='http://doc1.minh.io/' title='dev1.minh.io'&gt;http://doc1.minh.io&lt;/a&gt;. Anyway, listed below are the steps I took to get that to work:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log into Linode and add an A/AAAA record&lt;/strong&gt; &lt;p&gt;(DNS Manager -&gt; Edit -&gt; Add a new A record)&lt;/p&gt; &lt;table class='table'&gt;
    &lt;tr&gt;
        &lt;td&gt;Hostname&lt;/td&gt;
        &lt;td&gt;IP Address&lt;/td&gt;
        &lt;td&gt;TTL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;dev&lt;/td&gt;
        &lt;td&gt;10.10.10.10&lt;/td&gt;
        &lt;td&gt;Default&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt; One issue I encountered was that my Domain Zone was &amp;#8220;www.minh.io&amp;#8221; when I needed it to be &amp;#8220;minh.io&amp;#8221; so I cloned &amp;#8220;www.minh.io&amp;#8221; to &amp;#8220;minh.io&amp;#8221; and deleted &amp;#8220;www.minh.io.&amp;#8221; This solved an issue where I couldn&amp;#8217;t access &amp;#8220;minh.io&amp;#8221; and also my subdomain was &amp;#8220;dev.www.minh.io&amp;#8221; when it should&amp;#8217;ve just been &amp;#8220;dev.minh.io&amp;#8221;&lt;/p&gt;

&lt;p&gt;Also keep in mind that it takes a couple of minutes for the subdomain DNS changes to propagate across the internet. I initially had some trouble figuring this out and kept trying new changes until eventualy I saw the subdomain.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;strong&gt;In nginx, here&amp;#8217;s a sample configuration showing how you could add a subdomain&lt;/strong&gt;&lt;/p&gt;
&lt;pre class='prettyprint'&gt;&lt;code class='no-highlight'&gt;server {
        listen          80;
        server_name     mysite.io;
        location / {
            root   /srv/www/mysite.io/public_html/static;
        }
}

server {
        listen          80;
        server_name     sub.mysite.io;
        location / {
            root   /srv/www/mysite.io/public_html/static;
        }
}
&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://www.minh.io/tech/2013/05/20/subdomains-with-linode-and-nginx</link>
                <guid>http://www.minh.io/tech/2013/05/20/subdomains-with-linode-and-nginx</guid>
                <pubDate>2013-05-20T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Fun with Java's Play Framework</title>
                <description>&lt;p&gt;A while ago I made a claim that I would release my &amp;#8220;Foodwall&amp;#8221; project within 2 months from its initial proof of concept. Well, I dropped the ball since for the last month I haven&amp;#8217;t really worked on it. However, I&amp;#8217;m going to try to take a shot at releasing a newer version by the end of this month.&lt;/p&gt;

&lt;p&gt;Recently I&amp;#8217;ve been exploring new languages and frameworks to replace the PHP and Yii I used for Foodwall 1.0. It might&amp;#8217;ve been because I was rusty at PHP or new at Yii but I wasn&amp;#8217;t fast at developing new features. Initially I looked at Python and Django which looked really promising but then it clicked that I oaught to find a modern Java web framework since that&amp;#8217;s the language I&amp;#8217;m most familiar with.&lt;/p&gt;

&lt;p&gt;My choices came down to Play and Grails, which both offer rapid development and lots of nice features. Both addressed my primary concern with Java, which was that with standard Java web applications you need to compile before seeing changes, which really bogs down development when you&amp;#8217;re working on the UI.&lt;/p&gt;

&lt;p&gt;Anyway, so far I&amp;#8217;ve really liked the Play Framework and got some basic samples running:&lt;/p&gt;
&lt;hr /&gt;&lt;div class='row-fluid'&gt;
    &lt;div class='span3'&gt;
        &lt;h4&gt;Ajax Database&lt;/h4&gt;
        &lt;br /&gt;
        &lt;p&gt;Sample from Play Framework showing database access through AJAX&lt;/p&gt;
        &lt;a href='http://www.minh.io:8081' target='_blank'&gt;Launch Site&lt;/a&gt;
        &lt;br /&gt;
    &lt;/div&gt;  
    &lt;br /&gt;
    &lt;div class='span9'&gt;
        &lt;img alt='play_db1.jpg' src='/assets/img/play/play_db1.jpg' /&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;hr /&gt;&lt;div class='row-fluid'&gt;
    &lt;div class='span3'&gt;
        &lt;h4&gt;Chat and Robot&lt;/h4&gt;
        &lt;br /&gt;
        &lt;p&gt;Websocket chatroom and server-side robot pushing messages&lt;/p&gt;
        &lt;br /&gt;
        &lt;a href='http://www.minh.io:8082' target='_blank'&gt;Launch Site&lt;/a&gt;
    &lt;/div&gt;
    &lt;br /&gt;
    &lt;div class='span9'&gt;
        &lt;img alt='play_chat1.jpg' src='/assets/img/play/play_chat1.jpg' /&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;hr /&gt;&lt;div class='row-fluid'&gt;
    &lt;div class='span3'&gt;
        &lt;h4&gt;Play Hello World&lt;/h4&gt;
        &lt;br /&gt;
        &lt;p&gt;Play Framework hello world&lt;/p&gt;
        &lt;br /&gt;
        &lt;a href='http://www.minh.io:8083' target='_blank'&gt;Launch Site&lt;/a&gt;
    &lt;/div&gt;
    &lt;br /&gt;
    &lt;div class='span9'&gt;
        &lt;img alt='play_helloworld.jpg' src='/assets/img/play/play_helloworld.jpg' /&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;hr /&gt;&lt;div class='row-fluid'&gt;
    &lt;div class='span3'&gt;
        &lt;h4&gt;Zentasks&lt;/h4&gt;
        &lt;br /&gt;
        &lt;p&gt;Play Framework ZenTasks sample&lt;/p&gt;
        &lt;br /&gt;
        &lt;a href='http://www.minh.io:8084' target='_blank'&gt;Launch Site&lt;/a&gt;
    &lt;/div&gt;
    &lt;br /&gt;
    &lt;div class='span9'&gt;
        &lt;img alt='play_zentasks1.jpg' src='/assets/img/play/play_zentasks1.jpg' /&gt;
        &lt;img alt='play_zentasks2.jpg' src='/assets/img/play/play_zentasks2.jpg' title='Play Zentasks2' /&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
                <link>http://www.minh.io/tech/2013/05/19/fun-with-javas-play-framework</link>
                <guid>http://www.minh.io/tech/2013/05/19/fun-with-javas-play-framework</guid>
                <pubDate>2013-05-19T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Speed is a feature</title>
                <description>&lt;p&gt;Lately I&amp;#8217;ve been focused on improving application performance, which is often considered a top feature. There&amp;#8217;s so many examples that prove this point but here are a few &lt;a href='http://www.strangeloopnetworks.com/assets/images/infographic2.jpg' target='_blank'&gt;examples&lt;/a&gt;:&lt;/p&gt;
&lt;table class='table table-bordered table-striped'&gt;
    &lt;tr&gt;
        &lt;td&gt;Amazon&lt;/td&gt;
        &lt;td&gt;Increased revenue by 1% for every 100milliseconds of improvement&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Shopzilla&lt;/td&gt;
        &lt;td&gt;Sped up average page load time from 6 seconds to 1.2 seconds. 
        &lt;p&gt;Results: increased revenue by 12% and page views by 25%&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;AOL&lt;/td&gt;
        &lt;td&gt;Visitors in the top ten percentile of site speed viewed 50% more pages than visitors in the bottom ten percentile&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yahoo&lt;/td&gt;
        &lt;td&gt;Increased traffic by 9% for every 400milliseconds of improvement&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Mozilla&lt;/td&gt;
        &lt;td&gt;Made pages 2.2 seconds faster. Estimated result: 60 million more Firefox downloads per year&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;p&gt;So, now that we know that speed is important, how do we measure and improve it? Well, I&amp;#8217;ve listed the tools I&amp;#8217;ve used with my favorites at the top:&lt;/p&gt;
&lt;table class='table table-bordered table-striped'&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href='http://tools.pingdom.com/fpt/' target='_blank'&gt;Pingdom Tools&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Great tool that calculates load times with 3 different locations (2 U.S. and 1 Europe). It also
            archives historical results and offers tips for improving performance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href='http://www.webpagetest.org/' target='_blank'&gt;Webpagetest&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Probably one of the most comprehensive tools for evaluating website
        performance with lots of advanced options for selecting connection speeds, browsers,
        and a multitude of locations. My only gripe is that its historical results
        take quite a long time to show...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href='https://www.gtmetrix.com' target='_blank'&gt;GTmetrix&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Tool that aggregates results from PageSpeed and YSlow to provide a detailed
            breakdown of performance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href='https://developers.google.com/speed/pagespeed/insights' target='_blank'&gt;Google PageSpeed&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Nice tool that offers a PageSpeed Score and suggestions for improving speeds&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href='http://www.neustar.biz/enterprise/resources/web-performance/free-website-performance-test' target='_blank'&gt;BrowserMob&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Nice tool and interface that queues performance tests from 4 locations
            around the world but unfortunately doesn't provide any historical
            data&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href='http://loads.in/' target='_blank'&gt;Loads.in&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Great interface to see page load times around the world
            but unfortunately some of the scans do not load and I'm not
            sure how reliable the tool is&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;While these tools are great, I would prefer to have a single tool that aggregates my results and shows my performance across the world with different browsers and not just through a single page but a queue of pages. Depending on my availability, this may become a future side project for me.&lt;/p&gt;

&lt;p&gt;Anyway, one of the reasons I switched away from Wordpress to Jekyll was because Jekyll was really fast given that it&amp;#8217;s all static content with no database connectivity. Another major speed boost was when I moved away from Apache and used Nginx as my static content server.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/05/18/speed-is-a-feature</link>
                <guid>http://www.minh.io/tech/2013/05/18/speed-is-a-feature</guid>
                <pubDate>2013-05-18T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Maven3 on Ubuntu 13.04</title>
                <description>&lt;p&gt;Recently I tried installing Maven on Ubuntu 13.04 but had a little difficulty. Ideally it should&amp;#8217;ve been as easy as: &lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;sudo apt-get install maven&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;But alas, I received the following error:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;Unpacking libwagon2-java (from .../libwagon2-java_2.2-3+nmu1_all.deb) ...
dpkg: error processing /var/cache/apt/archives/libwagon2-java_2.2-3+nmu1_all.deb (--unpack):
 trying to overwrite '/usr/share/java/wagon-tck-http.jar', which is also in package libwagon-java 1.0.0-2ubuntu2

...

The following packages have unmet dependencies:
 maven : Depends: libwagon2-java (&gt;= 2.2-2) but it is not going to be installed
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fortunately, I googled the error and found that I &lt;a href='https://bugs.launchpad.net/ubuntu/+source/wagon2/+bug/1171056' target='_blank'&gt;could force install libwagon&lt;/a&gt;:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='bash'&gt;sudo dpkg -i --force-all /var/cache/apt/archives/libwagon2-java_2.2-3+nmu1_all.deb
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And Maven now works! Go me. So, what was the point of this somewhat pointless post? I just needed an excuse to try out highlight.js to syntax highlight with Jekyll through &lt;a href='http://softwaremaniacs.org/soft/highlight/en/download/' target='_blank'&gt;Yandex&lt;/a&gt;. And here you go:&lt;/p&gt;
&lt;pre class='prettyprint'&gt;
&lt;code class='java'&gt;System.out.println(&quot;hello world from java!&quot;);&lt;/code&gt;
&lt;/pre&gt;</description>
                <link>http://www.minh.io/tech/2013/05/13/maven3-on-ubuntu-1304</link>
                <guid>http://www.minh.io/tech/2013/05/13/maven3-on-ubuntu-1304</guid>
                <pubDate>2013-05-13T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Why I skipped business school and an MBA</title>
                <description>&lt;p&gt;Several years ago I had an opportunity to attend business school. I prepared for months, wrote essays for applications, took the GMAT, and asked for recommendations. Eventually I received a letter that I was accepted. However, it soon occurred to me that I didn&amp;#8217;t carefully consider the two great costs of attending: time and money.&lt;/p&gt;

&lt;p&gt;Business school is expensive. Since I was going to enroll part-time, there wasn&amp;#8217;t really any financial aid and I was looking at loans of $80k+. More importantly, though, I would be spending at least 20 hours a week for lectures and outside work. With full-time work, I would have very little time for anything else.&lt;/p&gt;

&lt;p&gt;Thus, I decided against business school. I had already experienced graduate school once and discovered that I learn the best whenever I&amp;#8217;m interested and passionate about a subject. It makes sense: think about reading some abstract math textbook versus your favorite magazine or website. I also enjoyed grad school more than undergrad; I believe it was because most of my classes were electives that interested me.&lt;/p&gt;

&lt;p&gt;My plan is to create my own MBA. Over the next few years, I hope to teach myself everything I need to know and develop my network similarly to how MBAs network during their studies. Check back in a few years and we&amp;#8217;ll see how this turns out&amp;#8230;&lt;/p&gt;</description>
                <link>http://www.minh.io/business/2013/05/12/why-i-skipped-business-school</link>
                <guid>http://www.minh.io/business/2013/05/12/why-i-skipped-business-school</guid>
                <pubDate>2013-05-12T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Automated continuous testing</title>
                <description>&lt;p&gt;Testing across many different platforms and browsers has always been tough. With so many different browsers and devices, it actually becomes impossible without some form of automation. Luckily, in the Java world there&amp;#8217;s free tools like Jenkins and Selenium which allow for automated GUI testing.&lt;/p&gt;

&lt;p&gt;Recently I looked into a free continuous integration host called Travis CI that allows me to run tests immediately after I commit my code to Github, which is brilliant. I was able to get it up and running after 10-15 minutes by following their getting-started guide: &lt;a href='http://about.travis-ci.org/docs/user/getting-started/' target='_blank'&gt;http://about.travis-ci.org/docs/user/getting-started/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out my current repo here: &lt;a href='https://travis-ci.org/minhongrails/DataStructures' target='_blank'&gt;https://travis-ci.org/minhongrails/DataStructures&lt;/a&gt; and my git project page &lt;a href='https://github.com/minhongrails/DataStructuresAlgorithms' target='_blank'&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll update this post again once I&amp;#8217;ve tried them out for a while.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/05/05/automated-continuous-testing</link>
                <guid>http://www.minh.io/tech/2013/05/05/automated-continuous-testing</guid>
                <pubDate>2013-05-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Best source control options</title>
                <description>&lt;p&gt;Most developers know the value of source control management (SCM) so I won&amp;#8217;t emphasize its awesomeness. In this post I wanted to share my experiences with various source control systems I&amp;#8217;ve used:&lt;/p&gt;
&lt;table class='table table-bordered table-striped'&gt;
    &lt;tr&gt;
        &lt;td&gt;SCM&lt;/td&gt;
        &lt;td&gt;Notes&lt;/td&gt;

    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Git&lt;/td&gt;
        &lt;td&gt;My current favorite SCM. I love its speed, simplicity, and distributed
nature (you can work offline and any local repo can take over a remote repo). 
Currently I use &lt;a href='http://www.bitbucket.org' target='_blank'&gt;www.bitbucket.org&lt;/a&gt; 
for private repo hosting and &lt;a href='http://www.github.com' target='_blank'&gt;www.github.com&lt;/a&gt;
 for public repo hosting.&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;SVN&lt;/td&gt;
        &lt;td&gt;I used SVN prior to Git and while it worked great it wasn't as easy
to learn how to branch, merge, and so on. There's also been times when I couldn't
use source control whenever a host machine was down. Nonetheless, I found 
&lt;a href='http://www.bitbucket.org' target='_blank'&gt;www.bitbucket.org&lt;/a&gt; to work 
great as an SVN host.
        &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;Rational Clearcase&lt;/td&gt;
        &lt;td&gt;My least favorite source control system. I found it to be very slow
compared to Git but I believe it works great for integration with other Rational
tools like ClearQuest for change control management.
        &lt;/td&gt;
    &lt;/tr&gt;

&lt;/table&gt;</description>
                <link>http://www.minh.io/tech/2013/04/30/free-source-control-hosts</link>
                <guid>http://www.minh.io/tech/2013/04/30/free-source-control-hosts</guid>
                <pubDate>2013-04-30T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Creating a fast and cheap website</title>
                <description>&lt;p&gt;This post will describe how I created this website and blog. In a nutshell, the key ingredients were: &lt;ul&gt;
    &lt;li&gt;Linode with Ubuntu (VPS web hosting) - $20/month + $5/month for backups&lt;/li&gt;
    &lt;li&gt;Nginx - fast static content web server&lt;/li&gt;
    &lt;li&gt;Jekyll - blog-aware, static site generator in Ruby&lt;/li&gt;
    &lt;li&gt;Bootstrap - UI framework w/ responsive design&lt;/li&gt;
    &lt;li&gt;Jekyll Bootstrap - starter kit for jekyll and bootstrap&lt;/li&gt;
    &lt;li&gt;Disqus - global comment/community management&lt;/li&gt;
    &lt;li&gt;Git - source control system&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;This entire site is open sourced &lt;a href='https://github.com/minhongrails/blog' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Previously I&amp;#8217;ve created websites and blogs using Wordpress, Drupal, and shared hosting and for anyone starting out with zero budget, I would recommend they look into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.byethost.com'&gt;http://www.byethost.com&lt;/a&gt;  - PHP, free hosting, no ads&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.000webhost.com'&gt;http://www.000webhost.com&lt;/a&gt; - PHP, free hosting, no ads, 
    kept getting 502 bad gateway errors on my phone, so I switched to byethost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are of course lots of easier options like Wordpress, Tumblr, etc, but generally if you want more control (e.g. more detailed user management) and freedom in your technology stack (i.e. not just PHP or a WP plugin, etc) then moving towards a free PHP host or a VPS like Linode is probably a good idea.&lt;/p&gt;</description>
                <link>http://www.minh.io/tech/2013/04/24/blog</link>
                <guid>http://www.minh.io/tech/2013/04/24/blog</guid>
                <pubDate>2013-04-24T00:00:00-04:00</pubDate>
        </item>


</channel>
</rss>
